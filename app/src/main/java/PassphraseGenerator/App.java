/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package PassphraseGenerator;

import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;

import java.security.SecureRandom;
import java.util.Base64;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

/*
 * This application is designed to generate a "passphrase" that is a user-defined number of characters long.
 * The way the program works is it pulls from a file containing a list of English words, then mashes up many
 * words together until it reaches one that "overflows" the count. Once it does this, it DOESN'T add this word,
 * and instead looks for a word that is the length needed to complete the passphrase.
 */

public class App {

        /* The main method - all actions happen here. */
	public static void main(String[] args) throws Exception {
            
                Logger logger = Logger.getLogger(App.class.getName());

                Greeting greeting = new Greeting();
		greeting.passphraseGreeting();
                
                /* Read from the word list file and generate an ArrayList of words. */
                //WordsGenerator wordsGenerator = new WordsGenerator();
                //WordlistFileReader wordlistFileReader = new WordlistFileReader();
                WordlistWebsiteReader wordlistWebsiteReader = new WordlistWebsiteReader();
                //ArrayList<String> words = wordsGenerator.generateWords(wordlistFileReader.getWordlist("wordlist.txt"));
                ArrayList<String> words = wordlistWebsiteReader.generateWords("https://raw.githubusercontent.com/dwyl/english-words/master/words_alpha.txt");
                
                Scanner scnrin = new Scanner(System.in);
                
                /* Generate a list of the lengths of the words. This is currently unused. */
                int numWords = words.size();
                ArrayList<Integer> lenWords = new ArrayList<>();
                
                for (int i = 0; i < numWords; ++i) {
                    lenWords.add(words.get(i).length());
                }
                Collections.sort(lenWords);
                
                /* Prompt the user for a passphrase length. */
                //System.out.print("passphrase length: ");
                //int maxLength = scnrin.nextInt();
                int maxLength = 40;
                
                PassphraseBuilder passphraseBuilder = new PassphraseBuilder();
                String passphrase = passphraseBuilder.generatePassphrase(words, maxLength);
                
                logger.log(Level.INFO, "Your passphrase is: " + passphrase);
                
                KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
                keyGenerator.init(256);

                // Generate Key
                SecretKey key = keyGenerator.generateKey();

                // Generating IV.
                byte[] IV = new byte[16];
                SecureRandom rng = new SecureRandom();
                rng.nextBytes(IV);
                
                Encryption encryption = new Encryption();
                byte[] encryptedPassphrase = encryption.encrypt(passphrase.getBytes(), key, IV);
                logger.log(Level.INFO, "Encrypted passphrase: " + Base64.getEncoder().encodeToString(encryptedPassphrase));
                
                Decryption decryption = new Decryption();
                String decryptedPassphrase = decryption.decrypt(encryptedPassphrase, key, IV);
                logger.log(Level.INFO, "Decrypted passphrase: " + decryptedPassphrase);
	}
}
