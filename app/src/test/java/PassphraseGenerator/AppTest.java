/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package PassphraseGenerator;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.net.URISyntaxException;
import java.io.FileNotFoundException;
import java.security.SecureRandom;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

class AppTest {
    
    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;
    private final PrintStream originalErr = System.err;

    void setUpStreams() {
        System.setOut(new PrintStream(outContent));
        System.setErr(new PrintStream(errContent));
    }
    
    void restoreStreams() {
        System.setOut(originalOut);
        System.setErr(originalErr);
    }

    @Test
    void passphraseGreetingTest() {
        setUpStreams();
        Greeting greeting = new Greeting();
        greeting.passphraseGreeting();
        assertEquals("Welcome to the Passphrase Generator program!\n", outContent.toString());
        restoreStreams();
    }
    
    @Test
    void getWordlistTestWithNullPointerException() {
        WordlistFileReader wordlistFileReader = new WordlistFileReader();
        assertThrows(NullPointerException.class, () -> wordlistFileReader.getWordlist("not_a_wordlist.txt"));
    }
    /*@Test
    public void getWordlistTestWithURISyntaxException() {
        
    }*/
    
    @Test
    void getWordlistWithValidURI() throws URISyntaxException, FileNotFoundException {
        WordlistFileReader wordlistFileReader = new WordlistFileReader();
        assertNotNull(wordlistFileReader.getWordlist("wordlist.txt"));
    }
    
    @Test
    void wordlistWebsiteReaderWithAnyException() {
        WordlistWebsiteReader wordlistWebsiteReader = new WordlistWebsiteReader();
        assertDoesNotThrow(() -> wordlistWebsiteReader.generateWords("https://raw.githubusercontent.com/dwyl/english-words/master/words_alpha.txt"));
    }
    
    /*@Test
    void generateWordsWithFileNotFoundException() throws URISyntaxException, FileNotFoundException {
        WordsGenerator wordsGenerator = new WordsGenerator();
        WordlistFileReader wordlistFileReader = new WordlistFileReader();
        File file = wordlistFileReader.getWordlist("not_a_wordlist.txt");
        assertThrows(FileNotFoundException.class, () -> wordsGenerator.generateWords(file));
    }*/
    
    @Test
    void generatePassphraseWithCorrectLength() throws URISyntaxException, FileNotFoundException {
        PassphraseBuilder passphraseBuilder = new PassphraseBuilder();
        WordlistFileReader wordlistFileReader = new WordlistFileReader();
        WordsGenerator wordsGenerator = new WordsGenerator();
        int length = 40;
        assertEquals(length, passphraseBuilder.generatePassphrase(wordsGenerator.generateWords(wordlistFileReader.getWordlist("wordlist.txt")), length).length());
    }
    
    @Test
    void encryptWithCorrectType() throws Exception {
        PassphraseBuilder passphraseBuilder = new PassphraseBuilder();
        WordlistFileReader wordlistFileReader = new WordlistFileReader();
        WordsGenerator wordsGenerator = new WordsGenerator();
        int length = 40;
        String passphrase = passphraseBuilder.generatePassphrase(wordsGenerator.generateWords(wordlistFileReader.getWordlist("wordlist.txt")), length);
        
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(256);
        SecretKey key = keyGenerator.generateKey();
        byte[] IV = new byte[16];
        SecureRandom rng = new SecureRandom();
        rng.nextBytes(IV);
        
        Encryption encryption = new Encryption();
        byte[] encryptedPassphrase = encryption.encrypt(passphrase.getBytes(), key, IV);
        assertTrue(encryptedPassphrase instanceof byte[]);
    }
    
    @Test
    void encryptDecryptTest() throws Exception {
        PassphraseBuilder passphraseBuilder = new PassphraseBuilder();
        WordlistFileReader wordlistFileReader = new WordlistFileReader();
        WordsGenerator wordsGenerator = new WordsGenerator();
        int length = 40;
        String passphrase = passphraseBuilder.generatePassphrase(wordsGenerator.generateWords(wordlistFileReader.getWordlist("wordlist.txt")), length);
        
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(256);
        SecretKey key = keyGenerator.generateKey();
        byte[] IV = new byte[16];
        SecureRandom rng = new SecureRandom();
        rng.nextBytes(IV);
        
        Encryption encryption = new Encryption();
        byte[] encryptedPassphrase = encryption.encrypt(passphrase.getBytes(), key, IV);
        Decryption decryption = new Decryption();
        String decryptedPassphrase = decryption.decrypt(encryptedPassphrase, key, IV);
        assertTrue(passphrase.equals(decryptedPassphrase));
    }
    
    @Test
    void placeholderMainTest() throws Exception {
        App.main(new String[0]);
    }
}
