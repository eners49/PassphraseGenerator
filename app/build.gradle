/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'jacoco'
    id 'org.sonarqube' version '4.0.0.2929'
}

apply plugin: 'war'
apply plugin: 'eclipse-wtp'
project.webAppDirName = 'WebContent'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    apply plugin: "java"
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'

    implementation group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.26'
    implementation group: 'org.glassfish.jersey.core', name: 'jersey-common', version: '2.26'
    implementation group: 'org.glassfish.jersey.core', name: 'jersey-server', version: '2.26'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(19)
    }
}

jar {
    manifest {
        attributes["Main-Class"] = "PassphraseGenerator.App"
    }
}

application {
    // Define the main class for the application.
    mainClass = 'PassphraseGenerator.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

sonar {
    properties {
        property "sonar.projectKey", "mynavylearning-uiux"
	property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.host.url", "http://sonarqube:9000"
        property "sonar.login", "admin"
        property "sonar.password", "mypassword"
	property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco.xml"
    }
}

jacocoTestReport {
    reports {
        xml.required = true
	xml.destination file("${buildDir}/reports/jacoco.xml")
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

//plugins.withType(JacocoPlugin) {
//    tasks["test"].finalizedBy 'jacocotestReport'
//}